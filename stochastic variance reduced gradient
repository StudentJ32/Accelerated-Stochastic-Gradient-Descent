from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import math
import argparse
import sys
import matplotlib.pyplot as plt

from tensorflow.examples.tutorials.mnist import input_data

import tensorflow as tf
import random

FLAGS = None


def main(_):
  # Import data
  mnist = input_data.read_data_sets(FLAGS.data_dir, one_hot=True)
  n = 100 #train size
  images = mnist.train.images[0:n]
  labels = mnist.train.labels[0:n]

  # Create the model
  x = tf.placeholder(tf.float32, [None, 784])
  W = [tf.Variable(tf.zeros([784, 100])), tf.Variable(tf.zeros([100, 10]))]
 
  b = [tf.Variable(tf.zeros([100])),tf.Variable(tf.zeros([10]))]

  h = tf.nn.sigmoid(tf.matmul(x, W[0]) + b[0])
  y = tf.matmul(h, W[1]) + b[1]
  lr=0.025 # learning rate for SRVG

  #plot list
  gradn = []
  loss = []
  gradns=[]
  loss_s=[]

  #aulixary variables
  W_s = [tf.Variable(tf.zeros([784, 100])), tf.Variable(tf.zeros([100, 10]))]
  u_s = [tf.Variable(tf.zeros([784, 100])), tf.Variable(tf.zeros([100, 10])),tf.Variable(tf.zeros([100])),tf.Variable(tf.zeros([10]))]
  b_s = [tf.Variable(tf.zeros([100])),tf.Variable(tf.zeros([10]))]
  h_s = tf.nn.sigmoid(tf.matmul(x, W_s[0]) + b_s[0])
  y_s = tf.matmul(h_s, W_s[1]) + b_s[1]


  # Define loss and optimizer
  y_ = tf.placeholder(tf.float32, [None, 10])

  cross_entropy = tf.reduce_mean(
      tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y))
  cross_entropy_s = tf.reduce_mean(
      tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y_s))

  #OUTPUT GRADIENTS
  grad = tf.train.GradientDescentOptimizer(learning_rate=lr).compute_gradients(cross_entropy,[W,b])
  grad_s = tf.train.GradientDescentOptimizer(learning_rate=lr).compute_gradients(cross_entropy_s,[W_s,b_s])

  # SRVD
  u_s_update = u_s[0].assign(grad_s[0][0]), u_s[1].assign(grad_s[1][0]), u_s[2].assign(grad_s[2][0]),u_s[3].assign(grad_s[3][0])
  var_update = W[0].assign(W[0]-lr*(grad[0][0]-grad_s[0][0]+u_s[0])), W[1].assign(W[1]-lr*(grad[1][0]-grad_s[1][0]+u_s[1])), b[0].assign(b[0]-lr*(grad[2][0]-grad_s[2][0]+u_s[2])), b[1].assign(b[1]-lr*(grad[3][0]-grad_s[3][0]+u_s[3]))
  var_s_update = W_s[0].assign(W_s[0]-lr*grad_s[0][0]), W_s[1].assign(W_s[1]-lr*grad_s[1][0]), b_s[0].assign(b_s[0]-lr*grad_s[2][0]), b_s[1].assign(b_s[1]-lr*grad_s[3][0])

  #SDG
  learning_rate=0.01
  train_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(cross_entropy)
  sess = tf.InteractiveSession()
  tf.global_variables_initializer().run()

  # Train
  # initialize auxilary variables
  saver = tf.train.Saver()
  saver.restore(sess, "C:/Purdue/research/supervised learning/Nonlinear/Nonlinear/model.ckpt")
  for _ in range(10):
      batch_xs, batch_ys = mnist.train.next_batch(10)
      sess.run(var_s_update,feed_dict={x: batch_xs, y_: batch_ys})

  for _ in range(10):
      batch_xu, batch_yu = images, labels
      sess.run(u_s_update,feed_dict={x: batch_xu, y_: batch_yu})
      W[0].assign(W_s[0]),W[1].assign(W_s[1])
      b[0].assign(b_s[0]),b[1].assign(b_s[1])
      for j in range(100):
          batch_x,batch_y = [],[]
          for k in range(10):
              index = random.randint(0,n-1)
              batch_x.append(images[index]),batch_y.append(labels[index])
          sess.run(var_update, feed_dict={x: batch_x, y_: batch_y})
      gradn.append(100+(n+1000)*(_+1)/n)
      print(sess.run(cross_entropy,feed_dict={x:images,y_:labels}))
      loss.append(sess.run(cross_entropy,feed_dict={x:images, y_:labels}))
      W_s[0].assign(W[0]),W_s[1].assign(W[1])
      b_s[0].assign(b[0]),b_s[1].assign(b[1])
      
      save_path = saver.save(sess,"C:/Purdue/research/supervised learning/Nonlinear/Nonlinear/model.ckpt")
  
'''
  tf.global_variables_initializer().run()
  for _ in range(n*150):
    batch_xs,batch_ys = [],[]
    for i in range(10):
        index = random.randint(0,n-1)
        batch_xs.append(images[index]),batch_ys.append(labels[index])
    learning_rate = 0.1*math.exp(-0.1*_)
    sess.run(train_step,feed_dict={x: batch_xs, y_: batch_ys})
    gradns.append(10*_/n)
    loss_s.append(sess.run(cross_entropy,feed_dict={x:images, y_:labels}))
'''   
   
'''
  # Test trained model
  correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))
  accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
  print(sess.run(accuracy, feed_dict={x: mnist.test.images,
                                      y_: mnist.test.labels}))
'''

'''
  #plot
  plt.plot(gradn,loss,'b-',label='SRVG')
  plt.plot(gradns,loss_s,'g-',label = 'SGD')
  plt.xlabel('#gradients calculated/n') ,plt.ylabel('loss')
  plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
  plt.show()
'''



if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  parser.add_argument('--data_dir', type=str, default='/tmp/tensorflow/mnist/input_data',
                      help='Directory for storing input data')
  FLAGS, unparsed = parser.parse_known_args()
  tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)

